length_df <- lyrics %>%
group_by(track_title) %>%
summarise(length = sum(length))
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
knitr::include_graphics("Pie1.png")
knitr::include_graphics("Pie2.png")
knitr::include_graphics("DataCleaning.png")
knitr::include_graphics("non_alphabetic_char_dist.png")
knitr::include_graphics("dirty_data_dist.png")
knitr::include_graphics("twitter_sentiment_score_freq.png")
knitr::include_graphics("music_wordcloud.png")
knitr::include_graphics("music_wordcloud_top5.png")
library(plotly)
knitr::opts_chunk$set(fig.width=10, fig.height=5)
trace1 <- list(
x = c(1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017),
y = c(3.47654320988, 3.56145251397, 3.5166163142, 3.45921450151, 3.62080536913, 3.63503649635, 3.775,
3.55555555556, 3.53086419753, 3.26086956522, 3.24817518248, 3.144, 3.16666666667, 3.08646616541,
2.89015151515, 2.97202797203, 3.12418300654, 2.87412587413, 2.98, 2.99335548173, 3.1619047619,
3.0608974359, 2.972, 2.80608365019, 2.77559055118, 2.66064981949, 2.65925925926, 2.4701986755),
line = list(
color = "rgb(22, 96, 167)",
width = 4
),
mode = "lines+markers",
name = "Average Length of Song Names",
type = "scatter",
xsrc = "lufeiwang:40:a32ddd",
ysrc = "lufeiwang:40:ac88e4"
)
data <- list(trace1)
layout <- list(
title = "Average Length of Song Names, 1990 to 2017",
xaxis = list(title = "Year"),
yaxis = list(title = "Length")
)
p <- plot_ly()
p <- add_trace(p, x=trace1$x, y=trace1$y, line=trace1$line, mode=trace1$mode, name=trace1$name, type=trace1$type, xsrc=trace1$xsrc, ysrc=trace1$ysrc)
p <- layout(p, title=layout$title, xaxis=layout$xaxis, yaxis=layout$yaxis)
p
trace1 <- list(
x = c(1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,
2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017),
y = c(3.47654320988, 3.56145251397, 3.5166163142, 3.45921450151, 3.62080536913, 3.63503649635,
3.775, 3.55555555556, 3.53086419753, 3.26086956522, 3.24817518248, 3.144, 3.16666666667,
3.08646616541, 2.89015151515, 2.97202797203, 3.12418300654, 2.87412587413, 2.98, 2.99335548173,
3.1619047619, 3.0608974359, 2.972, 2.80608365019, 2.77559055118, 2.66064981949, 2.65925925926, 2.4701986755),
line = list(
color = "rgb(22, 96, 167)",
width = 4
),
mode = "lines+markers",
name = "Top 50 Songs",
type = "scatter",
xsrc = "lufeiwang:46:4b5bdd",
ysrc = "lufeiwang:46:53d10b"
)
trace2 <- list(
x = c(1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,
2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017),
y = c(3.63235294118, 3.94117647059, 4.26666666667, 3.16666666667, 4.3, 4.125, 4.65384615385, 4.18571428571,
3.0987654321, 3.57142857143, 2.93333333333, 2.55555555556, 2.88888888889, 3.125, 2.75, 3.6, 3.74074074074,
3.75, 2.9375, 2.85714285714, 3.3164556962, 3.125, 2.9512195122, 2.62068965517, 2.89130434783, 2.79069767442,
2.375, 2.28571428571),
line = list(
color = "rgb(205, 12, 24)",
dash = "dash",
width = 4
),
mode = "lines+markers",
name = "Bottom 50 Songs",
type = "scatter",
xsrc = "lufeiwang:46:4b5bdd",
ysrc = "lufeiwang:46:5c9e0c"
)
data <- list(trace1, trace2)
layout <- list(
title = "Average Length of Song Names, 1990 to 2017",
xaxis = list(title = "Years"),
yaxis = list(title = "Length")
)
p <- plot_ly()
p <- add_trace(p, x=trace1$x, y=trace1$y, line=trace1$line, mode=trace1$mode, name=trace1$name, type=trace1$type, xsrc=trace1$xsrc, ysrc=trace1$ysrc)
p <- add_trace(p, x=trace2$x, y=trace2$y, line=trace2$line, mode=trace2$mode, name=trace2$name, type=trace2$type, xsrc=trace2$xsrc, ysrc=trace2$ysrc)
p <- layout(p, title=layout$title, xaxis=layout$xaxis, yaxis=layout$yaxis)
p
layout <- list(
title = "Heat Map of Number of Weeks Stayed on BillBoard",
xaxis = list(title = "Years")
)
p <- plot_ly(x = c(1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,
2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017),
y = c("1 word", "2 words", "3 words", "4 words", "> 5 words"),
z = matrix(c(26.86, 28.5277777778, 21.0909090909, 34.88, 24.5161290323, 29.0638297872, 22.2702702703,
26.6666666667, 22.2564102564, 22.0, 23.8857142857, 22.5609756098, 22.0, 20.1463414634, 23.2, 18.64,
21.511627907, 17.606557377, 21.724137931, 14.9180327869, 17.2096774194, 12.0634920635, 15.9534883721,
16.5909090909, 17.4029850746, 11.0694444444, 13.0625, 10.2857142857, 20.1764705882, 15.6615384615, 18.9827586207,
18.5423728814, 19.3134328358, 16.5689655172, 18.4745762712, 20.2978723404, 20.1228070175, 16.0517241379,
15.323943662, 18.1578947368, 17.4237288136, 19.7878787879, 19.734375, 17.5421686747, 15.7848101266, 14.8275862069,                15.0, 14.4301075269, 10.8901098901, 13.3764705882, 17.1728395062, 14.2828282828, 14.3625, 13.7173913043,
12.1315789474, 6.57723577236, 16.4047619048, 16.7378640777, 17.8426966292, 16.1489361702, 18.1527777778,
18.3783783784, 14.5192307692, 18.04, 17.0, 15.7142857143, 17.7671232877, 18.9577464789, 18.2025316456,
16.0657894737, 17.4625, 18.0384615385, 15.7586206897, 16.625, 16.3404255319, 13.9130434783, 14.2526315789,
13.4485981308, 14.141025641, 15.5128205128, 14.0, 11.9285714286, 10.9583333333, 9.41379310345, 13.1568627451,
14.8767123288, 15.3442622951, 16.5849056604, 16.4230769231, 15.7727272727, 18.4358974359, 18.6507936508,
15.0428571429, 19.3018867925, 19.3157894737, 21.28, 17.7234042553, 16.8222222222, 17.5769230769, 16.9,
13.4307692308, 16.5818181818, 13.5531914894, 13.75, 13.1538461538, 11.7183098592, 13.25, 10.275, 14.170212766,
14.6545454545, 14.5614035088, 8.4375, 12.5909090909, 14.9897959184, 15.9787234043, 14.2592592593, 15.7325581395,
17.0505050505, 18.1714285714, 17.1325301205, 12.8382352941, 17.0350877193, 15.8113207547, 17.4, 16.9183673469,
16.4782608696, 14.3548387097, 13.5, 12.4745762712, 11.8085106383, 11.5689655172, 10.1960784314, 10.2352941176,
10.775862069, 13.512195122, 12.5526315789, 12.2564102564, 15.8387096774, 16.4814814815, 12.652173913),
nrow=5, ncol=28, byrow = T), type = "heatmap", colors = colorRamp(c("white", "firebrick3")))
p <- layout(p, title=layout$title, xaxis=layout$xaxis)
p
knitr::include_graphics("top20count.jpg")
knitr::include_graphics("Scatterplot.png")
library(magrittr)
library(stringr)
library(dplyr)
library(ggplot2)
library(tm)
library(wordcloud)
library(syuzhet)
library(tidytext)
library(tidyr)
library(igraph)
library(ggraph)
library(readr)
library(circlize)
library(reshape2)
lyrics <- read.csv('./data/taylor_swift_lyrics.csv')
lyrics$length <- str_count(lyrics$lyric,"\\S+")
length_df <- lyrics %>%
group_by(track_title) %>%
summarise(length = sum(length))
library(magrittr)
library(stringr)
library(dplyr)
library(ggplot2)
library(tm)
library(wordcloud)
library(syuzhet)
library(tidytext)
library(tidyr)
library(igraph)
library(ggraph)
library(readr)
library(circlize)
library(reshape2)
lyrics <- read.csv('./data/taylor_swift_lyrics.csv')
lyrics$length <- str_count(lyrics$lyric,"\\S+")
length_df <- lyrics %>%
group_by(track_title) %>%
summarise(length = sum(length))
length_df %>%
arrange(length) %>%
ggplot(length_df, aes(x=length)) +
geom_histogram(bins=30,aes(fill = ..count..)) +
geom_vline(aes(xintercept=mean(length)),
color="#FFFFFF", linetype="dashed", size=1) +
geom_density(aes(y=25 * ..count..),alpha=.2, fill="#1CCCC6") +
ylab("Count") + xlab ("Length") +
ggtitle("Distribution of word count") +
theme_minimal()
library(magrittr)
library(stringr)
library(dplyr)
library(ggplot2)
library(tm)
library(wordcloud)
library(syuzhet)
library(tidytext)
library(tidyr)
library(igraph)
library(ggraph)
library(readr)
library(circlize)
library(reshape2)
lyrics <- read.csv('./data/taylor_swift_lyrics.csv')
lyrics$length <- str_count(lyrics$lyric,"\\S+")
length_df <- lyrics %>%
group_by(track_title) %>%
summarise(length = sum(length))
length_df %>%
arrange(length) %>%
ggplot(length_df, aes(x=length)) +
geom_histogram(bins=30,aes(fill = ..count..)) +
geom_vline(aes(xintercept=mean(length)),
color="#FFFFFF", linetype="dashed", size=1) +
geom_density(aes(y=25 * ..count..),alpha=.2, fill="#1CCCC6") +
ylab("Count") + xlab ("Length") +
ggtitle("Distribution of word count") +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
library(magrittr)
library(stringr)
library(dplyr)
library(ggplot2)
library(tm)
library(wordcloud)
library(syuzhet)
library(tidytext)
library(tidyr)
library(igraph)
library(ggraph)
library(readr)
library(circlize)
library(reshape2)
lyrics <- read.csv('./data/taylor_swift_lyrics.csv')
lyrics$length <- str_count(lyrics$lyric,"\\S+")
length_df <- lyrics %>%
group_by(track_title) %>%
summarise(length = sum(length))
length_df %>%
arrange(length) %>%
slice(1:10)
knitr::include_graphics("Scatterplot.png")
knitr::opts_chunk$set(echo = TRUE)
knitr::include_graphics("non_alphabetic_char_dist.png")
knitr::include_graphics("Pie1.png")
knitr::opts_chunk$set(echo = TRUE)
GT <- read.csv("./data/globalterrorismdb_0718dist.csv")
GT[GT==""] <- NA #replace empty cells with NA
library(ggplot2)
library(grid)
library(leaflet)
library(dplyr)
mapIND <- leaflet() %>%
addTiles('http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png',
attribution='Map tiles by
<a href="http://stamen.com">Stamen Design</a>,
<a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a>
&mdash; Map data &copy;
<a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>') %>%
setView(80, 24, zoom= 5)
ggplot(GT, aes(x = iyear))+ labs(title =" Terrorist attacks globally between 1970-2017 by attack type", x = "Years", y = "Number of Attacks", size = 15) +
geom_bar(colour = "grey19", fill = "tomato3") + facet_wrap(~attacktype1_txt, ncol = 3) +
theme(axis.text.x = element_text(hjust = 0.5, size = 10)) + theme(strip.text = element_text(size = 8, face = "bold"))
#ggsave("Try.jpg", plot = last_plot())
ggplot(data=GT, aes(x=iyear,fill=General_region)) + geom_bar() + ggtitle("Yearly Terrorist Attacks by Region")+
labs(x = "Years", y = "Number of Attacks")+ scale_fill_discrete(name = "Region")
# remove null target types
GTclean = GT[which(GT$targsubtype1_txt !='.'), ]
ggplot(GTclean, aes(x = iyear))+ labs(title =" Terrorist attacks on India between 1970-2015 by TARGET type", x = "Years", y = "Number of Attacks") +
geom_bar(colour = "grey19", fill = "tomato3") + facet_wrap(~targtype1_txt, ncol = 4) + theme(axis.text.x = element_text(hjust = 1, size = 12))+
theme(strip.text = element_text(size = 6, face = "bold"))
ggsave(plot = last_plot(), "Try.jpg")
library(tidyverse)
library(data.table)
library(countrycode) #Matching country names
library(plotly) #Interactive plots
library(viridis) #Color scales
library(tm) #Textmining for wordclouds
library(wordcloud) #Generation of wordclouds
library(leaflet) #Interactive maps
library(maps) #Maps generating
library(gganimate) #Animated plots!
install.packages('gganimate')
library(tidyverse)
library(data.table)
library(countrycode) #Matching country names
library(plotly) #Interactive plots
library(viridis) #Color scales
library(tm) #Textmining for wordclouds
library(wordcloud) #Generation of wordclouds
library(leaflet) #Interactive maps
library(maps) #Maps generating
#(gganimate) #Animated plots!
#Removing non-wanted warnings from the report
options(warn=-1)
#Reading data
trWW <- as.tibble(read.csv("./data/globalterrorismdb_0718dist.csv"))
leaflet_map <- function(data, map_obj){
#Merge map and data
map_obj$dataf <- left_join(data.frame(names = world$names, stringsAsFactors = F),
data,
by = c("names" = names(data)[2]))
#Creating viridis numerical color palette
pal <- if(is.numeric(map_obj$dataf[[3]])){
colorNumeric("YlOrRd",
domain = map_obj$dataf[[3]], na.color = "white")
}else{
colorFactor(brewer.pal(12, "Paired"),
domain = map_obj$dataf[[3]], na.color = "white")
}
#Generating label texts
strings <- if(ncol(map_obj$dataf) == 3){
#For a df with 3 columns (Region, Country, Variable)
sprintf(
paste("<strong>%s</strong><br/><strong>%s</strong><br/>",
names(map_obj$dataf)[3],
ifelse(is.numeric(map_obj$dataf[[3]]), ": %g ", ": %s ")),
map_obj$dataf[[1]], map_obj$dataf[[2]], map_obj$dataf[[3]])
}else if(ncol(map_obj$dataf) == 4){
#For a df with 4 columns (Region, Country, Color_Variable, Label_Variable)
sprintf(
paste("<strong>%s</strong><br/><strong>%s</strong><br/>",
names(map_obj$dataf)[3],
ifelse(is.numeric(map_obj$dataf[[3]]), ": %g ", ": %s "),
paste("<br/>",
names(map_obj$dataf)[4],
ifelse(is.numeric(map_obj$dataf[[4]]), ": %g ", ": %s "))),
map_obj$dataf[[1]], map_obj$dataf[[2]], map_obj$dataf[[3]], map_obj$dataf[[4]])
}else{
#For a df with 4 columns (Region, Country, Color_Variable, Label_Variable, Label_Variable)
sprintf(
paste("<strong>%s</strong><br/><strong>%s</strong><br/>",
names(map_obj$dataf)[3],
ifelse(is.numeric(map_obj$dataf[[3]]), ": %g ", ": %s "),
paste("<br/>",
names(map_obj$dataf)[4],
ifelse(is.numeric(map_obj$dataf[[4]]), ": %g ", ": %s ")),
paste("<br/>",
names(map_obj$dataf)[5],
ifelse(is.numeric(map_obj$dataf[[5]]), ": %g ", ": %s "))),
map_obj$dataf[[1]], map_obj$dataf[[2]], map_obj$dataf[[3]], map_obj$dataf[[4]], map_obj$dataf[[5]])
}
labels <- strings %>% lapply(htmltools::HTML)
#Creating a leaflet basic map
m <- leaflet(map_obj) %>% addTiles()
#Adding polygon with the variable
m <- m %>% addPolygons(
fillColor = ~pal(dataf[[3]]),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE, stroke = 1),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
#Adding legends to the plot
m <- m %>%
addLegend("bottomright", pal = pal, values = ~dataf[[3]],
title = names(map_obj$dataf)[3],
opacity = 1)
return(m)
}
#Getting world map polygons
world <- map("world", fill = T, plot = F)
#Changing countries' names
trWW$country_txt <- str_replace(trWW$country_txt, "United Kingdom", "UK:Great Britain")
trWW$country_txt <- str_replace(trWW$country_txt, "United States", "USA")
trWW$country_txt <- str_replace(trWW$country_txt, "Republic of the Congo", "Republic of Congo")
trWW$country_txt <- str_replace(trWW$country_txt, "People's Republic of the Congo", "Republic of Congo")
sources <- trWW %>%
count(dbsource) %>%
transmute(Source = fct_reorder(dbsource, n), Frequency = n) %>%
arrange(desc(Frequency))
plot <- trWW %>%
count(iyear) %>%
mutate(Year = iyear, Frequency = n) %>%
ggplot(aes(Year, Frequency))+
geom_line(color = "firebrick2")+
geom_point(color = "firebrick2")+
labs(title = "Frequency of terrorist atacks by year") +
theme(legend.position = "none")
ggplotly(plot)
plot <- trWW %>%
count(iyear) %>%
mutate(Year = iyear, Frequency = n) %>%
ggplot(aes(Year, Frequency))+
geom_line(color = "firebrick2")+
geom_point(color = "firebrick2")+
labs(title = "Frequency of terrorist atacks by year") +
theme(legend.position = "none")
ggplotly(plot)
#Obtaining frequencies by country and merging with the world map
country_data <- trWW %>%
group_by(region_txt, country_txt) %>%
summarise(Events = n()) %>%
arrange(order(country_txt))
#Ploting the map
leaflet_map(country_data, world)
plot <- trWW %>%
count(iyear) %>%
mutate(Year = iyear, Frequency = n) %>%
ggplot(aes(Year, Frequency))+
geom_line(color = "firebrick2")+
geom_point(color = "firebrick2")+
labs(title = "Frequency of terrorist atacks by year") +
theme(legend.position = "none")
ggplotly(plot)
Sys.setenv("plotly_username"="hx67")
Sys.setenv("plotly_api_key"="EIXItXSHqciV08WWSRh7")
plot <- trWW %>%
count(iyear) %>%
mutate(Year = iyear, Frequency = n) %>%
ggplot(aes(Year, Frequency))+
geom_line(color = "firebrick2")+
geom_point(color = "firebrick2")+
labs(title = "Frequency of terrorist atacks by year") +
theme(legend.position = "none")
ggplotly(plot)
plot <- trWW %>%
count(iyear) %>%
mutate(Year = iyear, Frequency = n) %>%
ggplot(aes(Year, Frequency))+
geom_line(color = "firebrick2")+
geom_point(color = "firebrick2")+
labs(title = "Frequency of terrorist atacks by year") +
theme(legend.position = "none")
ggplotly(plot)
api_create(plot, filename = "freq-time")
#Obtaining frequencies by country and merging with the world map
country_data <- trWW %>%
group_by(region_txt, country_txt) %>%
summarise(Events = n()) %>%
arrange(order(country_txt))
#Ploting the map
leaflet_map(country_data, world)
#Selecting rows to
descriptions <- trWW$summary[trWW$summary != ""] #Filters all filled descriptions
descriptions <- iconv(descriptions,"WINDOWS-1252","UTF-8")
words <- descriptions %>% as.character() %>%
removePunctuation() %>% #Removes punctuation
tolower() %>% #Converts all characters to lower case
removeWords(stopwords()) %>% #Remove english stop words
str_split(pattern = " ") %>% #Splits all lines into lists of words
unlist() #converts all lists into a single concatenated vector
word_freq <- words %>% as.tibble() %>% #Converts into tibble
filter(value != "", !str_detect(value, "^\\d*$")) %>% #Removes enpty and number-only words
count(value)
wordcloud(word_freq$value, word_freq$n, max.words = 75, colors = c("gold", "chocolate", "darkorange",  "firebrick3"), random.order = FALSE)
plot <- trWW %>%
mutate(Year = iyear) %>%
group_by(Year) %>%
summarise(Proportion = mean(success)) %>%
ggplot(aes(Year, Proportion)) +
geom_line(color = "firebrick2")+
geom_point(color = "firebrick2")+
scale_y_continuous(limits = c(0,1))+
labs(title = "Success proportion over time")
ggplotly(plot)
plot <- trWW %>%
mutate(Year = iyear, Killed = nkill) %>%
group_by(Year) %>%
summarise(Killed = sum(Killed, na.rm = T)) %>%
ggplot(aes(Year, Killed)) +
geom_line(stat = "identity", color = "firebrick2")+
geom_point(color = "firebrick2")+
labs(title = "Number of killed people over time")
ggplotly(plot)
plot <- trWW %>%
mutate(Type = reorder(attacktype1_txt, nkill, sum, na.rm = T), Killed = nkill) %>%
group_by(Type) %>%
summarise(Killed = sum(Killed, na.rm = T)) %>%
ggplot(aes(Type, Killed)) +
geom_bar(stat = "identity", fill = "firebrick2")+
coord_flip()+
labs(title = "Number of people killed by Type")
ggplotly(plot)
rmd2rscript <- function(infile){
# read the file
flIn <- readLines(infile)
# identify the start of code blocks
cdStrt <- which(grepl(flIn, pattern = "```{r*", perl = TRUE))
# identify the end of code blocks
cdEnd <- sapply(cdStrt, function(x){
preidx <- which(grepl(flIn[-(1:x)], pattern = "```", perl = TRUE))[1]
return(preidx + x)
})
# define an expansion function
# strip code block indacators
flIn[c(cdStrt, cdEnd)] <- ""
expFun <- function(strt, End){
strt <- strt+1
End <- End-1
return(strt:End)
}
idx <- unlist(mapply(FUN = expFun, strt = cdStrt, End = cdEnd,
SIMPLIFY = FALSE))
# add comments to all lines except code blocks
comIdx <- 1:length(flIn)
comIdx <- comIdx[-idx]
for(i in comIdx){
flIn[i] <- paste("#' ", flIn[i], sep = "")
}
# create an output file
nm <- strsplit(infile, split = "\\.")[[1]][1]
flOut <- file(paste(nm, "[rmd2r].R", sep = ""), "w")
for(i in 1:length(flIn)){
cat(flIn[i], "\n", file = flOut, sep = "\t")
}
close(flOut)
}
rmd2rscript("C:\Users\hongx\Desktop\ANLY503\Project2\R shiny code and data.zip\R shiny code and data\part2.Rmd")
rmd2rscript(r"C:\Users\hongx\Desktop\ANLY503\Project2\R shiny code and data.zip\R shiny code and data\part2.Rmd")
setwd("C:/Users/hongx/Desktop/ANLY503/Project2/R shiny code and data")
rmd2rscript("part2.Rmd")
library(rsconnect)
rsconnect::setAccountInfo(name='xhong',
token='4FB19230859EB06A69E5197A8058CFA3',
secret='PHHOc0xwCUrWGw4Rc/6br5O+X5qCYWhkcaFO2jn6')
runApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
setwd("C:/Users/hongx/Desktop/ANLY503/Project2/R shiny code and data")
runApp()
runApp()
